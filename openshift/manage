#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of project environment.

  Usage:
    $0 [options] [commands]

  Commands:
  ========
    createNewProfile <profileName> [templateProfileName]
      - Create a new deployment configuration profile from an existing one.
      - Automatically performs the rename of the profile name within the copied files.
        All other content is left unchanged.

        Example;
          $0 -p default -e null createNewProfile travelauth

    clean
      - Remove the application components from a given environment.
        Specify the environment using the -e option.

    delete
      - Delete allapplication components from a given environment.
        Specify the environment using the -e option.

    untag
      - Untag all of the application images.  Deletes all tags except 'latest'.

    scaleUp
      - Scale up one or more pods.
        Example;
          $0 -e prod scaleUp motomo

    scaleDown
      - Scale down one or more pods.
        Example;
          $0 -e prod scaleDown motomo

    recycle
      - Recycle one or more pods.
        Example;
          $0 -e prod recycle motomo
EOF
}

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :s: FLAG; then
    case ${FLAG} in
      # List of local options:
      s ) resourceSuffix=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
deleteResources() {
  (
    _appName=${1}
    if [ -z "${_appName}" ]; then
      echoError "\ncleanResources; You MUST specify the name of the application group.\n"
      exit 1
    fi

    printAndAskToContinue "If you contiune all of the resources for '${_appName}' will be deleted.  All data will be lost."
    oc -n $(getProjectName) delete all,secret,pvc,configmap,NetworkSecurityPolicy -l app-group=${_appName}
  )
}

cleanResources() {
  (
    _appName=${1}
    if [ -z "${_appName}" ]; then
      echoError "\ncleanResources; You MUST specify the name of the application group.\n"
      exit 1
    fi

    echoWarning "Cleaning out resources for '${_appName}'.  Secrets and PVCs will be retained."
    oc -n $(getProjectName) delete all,configmap,NetworkSecurityPolicy -l app-group=${_appName}
  )
}

createNewProfile() {
  profileName=${1}
  templateProfile=${2:-healthbc}
  if [ -z "${profileName}" ]; then
    echoError "\ncreateNewProfile; You MUST specify a profile name.\n"
    exit 1
  fi

  echo -e "\nCreating a new settings profile ..."
  settingsProfile="settings.${profileName}.sh"
  echo " - ${settingsProfile}"
  echo "# Just used to allow the profile to be set." > ${settingsProfile}

  echo -e "\nCreating the base set of deployment .param files ..."
  searchPath="./templates"
  searchFilter="*-deploy.${templateProfile}.param"
  templateParams=$(find ${searchPath} -type f -name "${searchFilter}")
  for templateParam in ${templateParams}; do
    destPath=$(echo ${templateParam} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    cat ${templateParam} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done

  echo -e "\nCreating the base api profile configuration(s) ..."
  searchPath="./templates"
  searchFilter="*/${templateProfile}/schema.json"
  templateConfigDir=$(getDirectory $(find ${searchPath} -type f -path "${searchFilter}"))
  templateConfigs=$(find ${templateConfigDir} -type f)
  for templateConfig in ${templateConfigs}; do
    destPath=$(echo ${templateConfig} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    mkdir -p $(getDirectory ${destPath})
    cat ${templateConfig} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done

  echo -e "\nCreating the base issuer-web profile configurations ..."
  searchPath="./templates"
  searchFilter="*/${templateProfile}/logo.svg"
  templateConfigDir=$(getDirectory $(find ${searchPath} -type f -path "${searchFilter}"))
  templateConfigs=$(find ${templateConfigDir} -type f)
  for templateConfig in ${templateConfigs}; do
    destPath=$(echo ${templateConfig} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    mkdir -p $(getDirectory ${destPath})
    cat ${templateConfig} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  clean)
    appName=${1:-${PROFILE}}
    cleanResources ${appName}
    ;;

  delete)
    appName=${1:-${PROFILE}}
    deleteResources ${appName}
    ;;

  untag)
    appName=${1:-issuer-kit}
    untagImages ${appName}
    ;;

  createnewprofile)
    profileName=${1}
    templateProfile=${2:-healthbc}
    createNewProfile ${profileName} ${templateProfile}
    ;;

  scaleup)
    scaleUp -w ${@}
    ;;
  scaledown)
    scaleDown -w ${@}
    ;;
  recycle)
    recyclePods -w ${@}
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null